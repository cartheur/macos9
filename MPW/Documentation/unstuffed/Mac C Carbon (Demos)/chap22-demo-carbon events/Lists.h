// *******************************************************************************************// Lists.h                                                                  CARBON EVENT MODEL// *******************************************************************************************// // This program allows the user to open a window and a movable modal dialog by choosing the// relevant items in the Demonstration menu.  The window and the dialog both contain two// lists.//// The cells of one list in the window, and of both lists in the dialog, contain text.  The// cells of the second list in the window contain icons.//// The text lists use the default list definition function.  The list with the icons uses a// custom list definition function.//// The currently active list is indicated by a keyboard focus frame, and can be changed by// clicking in the non-active list or by pressing the tab key.//// The text list in the window uses the default cell-selection algorithm; accordingly, // multiple cells, including discontiguous multiple cells, may be selected.  The cell-// selection algorithm for the other lists is customised so as to allow the selection of only// one cell at a time.//// All lists support arrow key selection.  The text list in the window and one of the lists in// the dialog support type selection.//// The window is provided with an "Extract" push button.  When this button is clicked, or when// the user double clicks in one of the lists, the current selections in the lists are// extracted and displayed in the bottom half of the window.  In the dialog, the user's// selections are displayed in static text fields embedded in placards below each list.//// The program utilises the following resources://// ╔	A 'plst' resource.//// ╔	An 'MBAR' resource, and 'MENU' resources for Apple, File, Edit and Demonstration menus//		(preload, non-purgeable).//// ╔	A'DLOG' resource (purgeable) (initially not visible) and associated 'dlgx', 'dftb', and//		'DITL' resources (purgeable).//// ╔	'CNTL' resources (purgeable) for various controls in both the window and dialog box,//		including the list controls for the dialog box.//// ╔	'ldes' resources associated with the list controls for the dialog box.//// ╔	'STR#' resources (purgeable) containing the text strings for the text lists and for the//		titles of the icons.//// ╔	An icon suite (non-purgeable) containing the icons for icon list.//// ╔	An 'LDEF' resource (preload, locked, non-purgeable) containing the custom list//		definition function	used by the icon list.//// ╔	'hrct' and 'hwin' (purgeable) resources for balloon help.//// ╔	A 'SIZE' resource with the acceptSuspendResumeEvents, canBackground, //		doesActivateOnFGSwitch, and isHighLevelEventAware flags set.//// *******************************************************************************************// ииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииии includes#include <Carbon.h>// иииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииии defines#define rMenubar								128#define mAppleApplication				128#define  iAbout									1#define mFile										129#define  iQuit									12#define mDemonstration					131#define  iHandMadeLists					1#define  iListControlLists			2#define cExtractButton					128#define cGroupBox								129#define cSoftwareStaticText			130#define cHardwareStaticText			131#define rTextListStrings				128#define rIconListIconSuiteBase	128#define rIconListStrings				129#define rListsDialog						128#define  iDateFormatList				4#define  iWatermarkList					5#define  iDateFormatStaticText	7#define  iWatermarkStaticText		9#define  rDateFormatStrings			130#define  rWatermarkStrings			131#define kUpArrow								0x1e#define kDownArrow							0x1f#define kTab										0x09#define kScrollBarWidth					15#define kMaxKeyThresh						120#define kSystemLDEF							0// ииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииии typedefstypedef struct{	ListHandle	textListHdl;	ListHandle	iconListHdl;	ControlRef	extractButtonHdl;} docStructure, **docStructureHandle;typedef struct{	RGBColor			backColour;	PixPatHandle	backPixelPattern;	Pattern				backBitPattern;} backColourPattern;// иииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииии function prototypesvoid				main												(void);void				doPreliminaries							(void);OSStatus		appEventHandler							(EventHandlerCallRef,EventRef,void *);OSStatus		windowEventHandler					(EventHandlerCallRef,EventRef,void *);void				doAdjustMenus								(void);void				doMenuChoice								(MenuID,MenuItemIndex);void				doSaveBackground						(backColourPattern *);void				doRestoreBackground					(backColourPattern *);void				doSetBackgroundWhite				(void);void				doOpenListsWindow						(void);void				doKeyDown										(SInt8,EventRecord *);void				doDrawContent								(WindowRef);void				doActivateDeactivate				(WindowRef,Boolean);void				doInContent									(Point,UInt32);void				doControlHit								(WindowRef,ControlRef,Point);ListHandle	doCreateTextList						(WindowRef,Rect,SInt16,SInt16);void				doAddRowsAndDataToTextList	(ListHandle,SInt16,SInt16);void				doAddTextItemAlphabetically	(ListHandle,Str255);ListHandle	doCreateIconList						(WindowRef,Rect,SInt16,ListDefUPP);void				doAddRowsAndDataToIconList	(ListHandle,SInt16);void				doHandleArrowKey						(SInt8,EventRecord *,Boolean);void				doArrowKeyMoveSelection			(ListHandle,SInt8,Boolean);void				doArrowKeyExtendSelection		(ListHandle,SInt8,Boolean);void				doTypeSelectSearch					(ListHandle,EventRecord *);SInt16			searchPartialMatch					(Ptr,Ptr,SInt16,SInt16);Boolean			doFindFirstSelectedCell			(ListHandle,Cell *);void				doFindLastSelectedCell			(ListHandle,Cell *);void				doFindNewCellLoc						(ListHandle,Cell,Cell *,SInt8,Boolean);void				doSelectOneCell							(ListHandle,Cell);void				doMakeCellVisible						(ListHandle,Cell);void				doResetTypeSelection				(void);void				doRotateCurrentList					(void);void				doDrawFrameAndFocus					(ListHandle,Boolean);void				doExtractSelections					(void);void				doDrawSelections						(Boolean);void				listDefFunction							(SInt16,Boolean,Rect *,Cell,SInt16,SInt16,ListHandle);void				doLDEFDraw									(Boolean,Rect *,Cell,SInt16,ListHandle);void				doLDEFHighlight							(Rect *);void				doListsDialog								(void);Boolean			eventFilter									(DialogPtr,EventRecord *,SInt16 *);// *******************************************************************************************